variables and data types:
1. java is a strictly case sensitive
2. name converntion is veru importaint and comments as well
3. obligation means rules that needs to be followed otherwise compilation error will be thrown.
4. convention means rules that are not mandatory but should be followed
5. function is known as method  in java
6. class name 's every first letter should be capital
 
 **************************varibles*********************

7. variables are also known as attributes
8. variables should be lowercase in nature
9. constant varibles should always be in uppercase
10. in method , except first letter of first word .every word 's first letter should be  capital
11. identifier can  be of form A-Z , a-z ,0-9, $ and _ .  total = 64
  
  ********************* keyword **********************

12. there are 50 keywords in java
13 .const and goto are keywords but we do not use them in java
14. there are 8 primitive data types in java
15. in primitive data types only 1 value can be there in variable of its type.
    numbers  =       byte(8 bit )    short(16 bit)     int(32 bit)       long(64 bit)
    flaoting point = float (32 bit)   double(64 bit)
    boolean 
    char - (16 bits) 
16 all the numbers by default are int
17 all the  floating numbers are by default double.
 widening and narrowing
 widening means assigning lower precesion value to higher precision value
 widening is automatically done while we create value
 narrowing should be done explicitely
 float x = 1.5f or float x = float(1.5) or float x = (float)1.5


   src is having all source code of each and every class and library in java folder.
   bin contains all the tools to do the evry function in java
   javap.exe is used to see what has gone in class in java 


*******************class ***************
class is having attributes (varibales and data member ) and behaviour(methods or blocks)
student s1 = new student();    instantion of a class
student s1;   -> refrence variable(which holds the address of object of that class)
s1 = new student();   -> dynamic memeory allocation
in java jvm creates object not os
in jvm three memory builders  1. heap 2. stack  3. class area
class is a template of an object.

example : 
    class Student
    {
       int roll_no;
       string name;
    }
# if a class is public then it should be saved with the name of a class
it also concludes that we cannot have more than 1 public class in a file
public class Student
{ 
   
}

in java we have 4 diffrent access specifiers or label visiblity
1. public  - anywhere
2. private - that can be accessed with in the class only
3. default - within the package accessible
4. protected - within the package as wellas outside the package till inheritance.

.class file is known as byte code.java is a magic of byte code.

in java array can be defined in  3 types
int arr[]
int []arr
int ...arr

all the system softwares are command line intrerpretar(command line means giving input before execution)

to print the statements:
1. printf is used to print strings
2. print is used to print inn same line
3. println is used to print every time  in next line

*if any variabe is not intialised then default valueee is set
 but for only inheritance varible,class var but not for local var

default value:
  int - 0
  float , double = 00
  char = null
 all object refrences are created and will hold null

three types of meemeory :
   1. heap
   2. stack
   3. class area

variables of diffrent types :
1. instance varibles

variables defined inside the class are known as instance varible,for every other object is having their own instance varibles values in memory.it is a prorperty of a object.

Until we don't create the object no instance varible is created in memory. 

2. class variable / static variable

static var are created in class area memory block.
it also get default value
static  var are shared by all the objects
static variable will be created in memroy even before creation of main module

    eg;
    class A{
    static int x;  ----------x is a class variable
    }

   any static member function/scope cannot directly access any non static member
3.  local variables:
  they are defined inside any local block.
  eg:
    class A{
    void demo(int a)   -------a is local variable
    {
        int b;   -------------b is a local var
        for(int i=0;i<5;i++) ------i is a local var
        {
             int c;  ---------c is a local var
        }
    }
    
    }
  local var doesn't get any default value.
  no access modifier is allowed  with local var
  static cannot be used with local var
  local  var should be intialsied before it is accessed or used otherwise it will through error.
  as soon as block declaring gets finished varibles get dealocated.
  local varible always dominant in any scope.


Data types and type conversion:
*by default every integer is int
*by default every floating value is float
 widening and narrowing
  widening means assigning lower precesion value to higher precision value
  widening is automatically done while we create value
narrowing should be done explicitely
 float x = 1.5f or float x = float(1.5) or float x = (float)1.5

size - -2^(b-1) -> (2^(b-1)-1)
float 32 bit
double 64 bit

type casting:
byte -> short ->int - >long ->float ->double

to append int value to a long then L should be appended.
to append double value to a float then f should be appended.

widening : byte -> short -> int -> long -> float -> double
narrowing : reverse  of above

char : 
* char is comapatible with int
char c = 65;

type casting : 
      char c = (int)65;

compound assignment :
    r += 4;
we use this because it helps r to get updated at its position itself without fetching it .

relational operators:
== , < , <,!=

unary operator :
+ , - , ++ , -- , !

boolean logical operator : 
& , | , ^ , ! , 

&& - short circuit and  - if first condition is false then next statement will not check
!! - short circuit or  - if first condition is false then next statement will not check

ternary operator ( ? ) :

x<5?x++:x--;

bitwise operator
~ - bitwise not operator
all the bits are inverted.
37 = 0  [00...0]23 00100101  - 32 bit number
~37 = 1 [1.....1]23 11011010 - 32 bit nummber
then found 2's complement of that number.

right side :
>>

x =30
 y = 3
 x>>y
 eg:
  000...0   11110
 30 / 2^b - b is the no of bits
shift operator:
>>
it will fill 0 if no is +ve
and will fill 0 if no is -ve
it is decided with the help of sign bits

>>> - shift right zero fill  - this is used for +ve number and it's performance is fast as itworks fine with +ve number only.

left shift : it  will multiplly the number by 2^bit . 

scanner is a class which is used to take the input from the user 
next xxxxx()
eg:
next Int(),Boolean()
next Line(): it is used for string.
next() - it is used for first word.
Scanner is not a static class so we create object for the same
scanner 
 
scanner is defned in import java.util.*;
every class is by default inherited from object class

to create a object of scanner class
Scanner ob = new Scanner(System.in);
all packages are defined in lowercase.
to give one more search option for compiler
lang package is searched for the package

util is a sub folder of java which has defined soe classes

to use that util package
we have to write
import java.util.*

class will not be loaded into the memory until it's refrence has not created. 

there is no method for char data type
nextByte()
next()  - it is used for reading words after first space it won't read
there are 9 methods we can use in scanner method

after nextline() we have to clear the buffer to do so
we have to give dummy nextline() to read the /n that we have used to move to next statement

it is used for taking run time input.

command line input:

to convert string into any other data type we will use ;
parsebyte
parse int and parse double can be used 

static variables will get defaulT VALUE from static block.
it is defined in java.lang.Object

Loops;
for loop
while loop
do while loop

 for each loop - enhanced loop
 it is used for the traversal
 it is used for the collections or arrays only.
 for (integer i : arr)
  {
    
    System.out.println(i);
  }
 

break keyword :

it is used to stop the flow.
control is transfered to the last of the block
two types of break are there:
1. labeled break

2. unlabelled break



continue:
control is shifted control to the beginning of the block.

signature includes name of the method as well as  attributes,there is never any return statement.

header includes each and everything used for defining that class.,including modifier,name,return type

system.exit(0) is used for exiting from
-----------------------------------------------------------------------------------------------
methods :

if any function is not returning anything is called procedure.
if it return we call it function and method
abstract method::
		a method without a body is called abstract method.
		it should have ; after header and abstract keyword.

method overloading.

methods can be overloaded means two methods of same name can be there in same class.
the thing needs to be in mind is it should have diffrent parameters.

constructor:
 
 it is used to intialize the instance variables some values.
 we cannot call the constructor without creating the object.
 constructor can be of two types:
 1. non argumented constructor
 2. parameterised constructor.
 3. default constructor - it will be provided java commpiler ,it is available when no constructor is defined.
    default constructor  is not argumented
    default constucctor is having same accessiblity as of class.
 we can create our constructor of any  accessiblity irrespective of class accessiblity.
jvm is used in running time.
a class with private constructor is known as singleton class.
singleton class is a class which has having either 1 object or no object.

enum:
by default enum class inherites the data from any enum that we define
same goes for class which is inehrited by object

we can create enum outside or inside the  class.
if difine outside then it can be read from any other class.

in enum we cannot incerease the size of enum.
class EnumDemo
   {
      coffee,tea,burger;
      int price;//price for the items
      EnumDemo(int p)//constructor
      {
           price = p;
      }
   }
by default and only access specifier allowed is private.
all constructors are by default private.

enum can be private when it is inside the class.
enum cannot be defined inside a local block..
multiple enum can be defined in a class.

to take input from user for his choice 
we have to convert it to object from string
we use values()


for using for-each loop we can use items.values();

valueof() for this

items ob = enum.valueof(sc.nextline());

Array list:

collection framework:
                          collection
                            |
                     1.list               2.set                      3.queue
                    abstract list        abstract set                abstract queue
                    1. array list         hash set                   
                    2. linked list     linked hashset
                                          tree set

swing api is used to develop gui for java
from api we can make applications
framework is just to enhance the work or to reduce the effort
Arraylist is not synchronized where vector is synchronized. - they can be used for dynamic arrays
stack is the sub class of vector and here two threads can not be called simultaneously.
set is having non duplicacy
linked list is the only class which is inherited by two collection.queue and list


ArrayList
it extends abstractlist and implements the last interface.
define in java.util.*
automatic conversion of primitive data type to an object is called auto-boxing
and vice versa is called un-boxing.

this ArrayList class supports three constructors
capacity means how many elements can be strored without reallocation
size means how many elements are stored.
collection is a interface whose object can not be created.

we have to make generic object to remove the warning of non-safe

int size() - to check the size of the array
void clear() - to delete all the elements
void ensureCapacity( int *) - used for increasing the capacity.
object remove(int index) - remove the object at index
boolean remove(object o) - to remove the object at its first occurence
boolean get(int index)
int indexOf(object o);
int lastIndexOf(object o);



 Data time api:

 there were two problems with java.util,date package
 where particularly we cannot get date only , or year only

 to avoid these problems 
 java date api package is used.
 local date 
 local time
 local Datetime

  object should be immutable such that we cannot change the object value ,only new object will be formed.
  it should be thread safe.
  it use ISO standard.
  date : ISO 8061 FORMAT  yyyy-mm-dd
  time : HH:mm:ss.SSS
  SSS is in nano second and it will always be in group of 3
  there are two exception
  date time exception
  date time parse exception


 ********************************

String :
string  - it is immutable
string buffer - it is mutable ,synchronized   
string builder  -| , it is not  synchronized
string takenover

String s = "hello"; it sometiimes doesn't create a new object,if object is present already,it will create a refrence.
String s = new String("hello") ; - it will always create a new object ,it will use heap.


equals function will  compare the content.
where == will  compare the address..

there are three ways to create the object
String s1 ="hello";
String s2 = new String("hello")
String [] s3

String constructor 

1. public String()
2. public String(String)
3. public String(char [])
4. public String(byte [])
5. public String(char [],int offset,int no_of_chars)
6. public String(byte [],int offset,int no_of_chars)

string class methods: 
concat() - it is used to join strings
length() - it return the integer 
charAt(index);
toCharArray();
getChars(start index , end index,char [],int offset);
equalsIgnoreCase()
startsWith()
endsWith()
coompareTo() - 0 -1 +1
replace ("string 1" , "string to ")

trim () - omit all the trailing spaces.

string split 
String [] s = "gh  v  f ad b n  k lSNFJAN"
System.out.println(s.split(" ",limit))


String builder class:
capacity : how many elements caan be stored
size/length() : how many elements are stored

here 
append() to append any data type or concate
all + will be append to data into string builder
system.out.println("hello" + a + "world" + obj)

2n+2 are declared for n we have passed in object for capacity

String builder methods:
void ensureCapacity (int enp)
setlength(int a)
char charAt(int index,"alpha")
{ it will replace the char at index}
insert () it will shift the elements to right or somewhere
reverse () it will reverse the chars and return the string builder
replace ()
delete ()
deletecharat()

IN string builder it always going to compare the address space
but to use equals we should go for string to match the content.

Inheritance"              
 two relationship 
 1. is - a   for inheriting

 2. has - a  for attributes
if we declare a class final it cannot be inherited
if we declare a class abstract no object can be created ,it can have abstract method(without a body followed by abstract keyword if we inherit it we have to define in child class otherwise it will became abstract class)

interface cannot inherit  the  class but vice versa is possible.
values are inherited from the immediate parent.
if there is no super() in first statememt in constructor
then it will call the constructor 

parent class object can hold the refrence of child class but vice versa is not possible
Vechicle v = new Car();
Car c = new DriverLessCar();
Car a = new Vechicle();  not possible

InstanceOf:
polymorphism:

at compile  time binding is with  refrence variable
at run time binding is with defined variabel

instanceOf:
c instanceOf Car - return boolean value;
v instanceOf Car - return true


in inherited class if we have no constructor then default constructor will call super() by  itself
so we should define a parameterised constructor in inherited class too.

in inherited class ,it will call the super(argument)
in overriding signature cannot be changed
but return can be changed

run time polymorphism is method overriding
access specifier cannot be reduced in  inherited class for a method
@override - it is a anotation usd to check overiding check  at compile time
method hiding:
if you define a static method of a parent class in child class
and it is not a method overriding
in static methods run time binding is not there so always according to static polymorphism static method will be called

Use of super()
1. in case of  overriding we can call the original method of parent class also
using super.method()
2. if we want to use the original values of parent class we can use
object_name.super.var_name;

constructor chaining
we have to left atleast one constructor without loop or super

final :
in class it can be inherited
in method cannot be override
in var it is constant

final var does not get default value.

if we declare private constructor in a class we cannot create its obejct as well as we cannot inherit it.
static method can also be called with object as well as class name

